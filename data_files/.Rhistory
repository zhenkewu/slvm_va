0/64
rm(list=ls())
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(foreign)
library(nnet)
library(grDevices)
library(gplots)
library(plotly)
library(broom)
##----------------------------
### load the VA datasets ###
##----------------------------
setwd("/Users/irena/repos/slvm_va/data_files/")
dataFreeze <-  data.table(read.csv("data_freeze_10062019.csv"))
dataDict <- data.table(read_excel("data_dictionary.xlsx"))
dataFreeze$sex <- ifelse(dataFreeze$g1_05==1, "Female", "Male")
regData <- dataFreeze[,  c("gs_text34",#main CoD
"g4_08", #separate room for cooking
"g5_06a", "g5_06b", # education level + # of years of education
"g1_06y", "g1_06m", "g1_06d", # day, month, year of death
"site", "sex"), with=FALSE]
## check how many missing values:
sum(is.na(regData))
## 66 missing values - for now, just drop:
regData_noNA <- na.omit(regData)
# regData_noNA$cod_dates <-paste(regData_noNA$g1_06y, regData_noNA$g1_06m,
#                                regData_noNA$g1_06d,sep="-")
##
### Since there are a relatively high # of unique CoD, we will create a meta-category column to group similar CoD
## generally following what the IHME website has:
create_meta_adult_cod <- function(x){
category = x
if(grepl(paste(c("Bite of Venomous Animal", "Violent Death", "Road Traffic",
"Poisonings", "Drowning", "Homicide","Falls", "Fires", "Other Injuries"), collapse = "|"),x)){
category = "External"
} else if(grepl(paste(c("Diarrhea/Dysentery", "Encephalitis", "Meningitis", "Measles",
"Hemorrhagic fever", "Other Infectious Diseases"), collapse = "|"), x)){
category = "Infectious"
} else if(grepl(paste(c("Malaria","AIDS", "TB"), collapse = "|"), x)){
category = "Global Epidemic"
} else if(grepl(paste(c("Pneumonia", "Asthma","COPD"), collapse = "|"), x)){
category = "Respiratory"
} else if(grepl(paste(c("Renal Failure"), collapse = "|"),x)){
category = "Renal Failure"
} else if(grepl(paste(c("Acute Myocardial Infarction", "Stroke","Other Cardiovascular Diseases"), collapse = "|"),x)){
category = "CVD"
} else if (grepl(paste(c("Stomach Cancer","Breast Cancer", "Esophageal Cancer", "Prostate Cancer",
"Colorectal Cancer", "Cervical Cancer", "Lung Cancer", "Leukemia/Lymphomas"), collapse="|"),x)){
category = "Cancer"
} else if (grepl(c("Suicide"),x)){
category = "Suicide"
} else if (grepl(c("Maternal"),x)){
category = "Maternal"
} else if (grepl(paste(c("Diabetes", "Epilepsy","Cirrhosis","Other Non-communicable Diseases"),
collapse="|"),x)){
category = "Noncommunicable \n Diseases"
}
return(category)
}
regData_noNA$meta_cod <- mapply(create_meta_adult_cod, regData_noNA$gs_text34)
## check that there are no empty cells for the multinom regression
regData_noNA$death <- 1
graphData <- regData_noNA[,list(death_count=sum(death)), by=c("meta_cod","g4_08", #separate room for cooking
"g5_06a", "g5_06b", # education level + # of years of education
"g1_06m", # day, month, year of death
"site", "sex")]
## remove maternal CoD
regData_noNA <- regData_noNA[!meta_cod=="Maternal"]
levels(regData_noNA$g1_06m) <- c("Don't Know", "January", "February", "March", "April","May",
"June", "July", "August", "September", "October", "November",
"December")
levels(regData_noNA$g5_06a) <- c("Don't Know", "No Schooling", "Primary School",
"High School", "College or Higher")
levels(regData_noNA$g5_06b) <- c("Don't Know", "0","1", "2", "3", "4", "5", "6", "7","8",
"9", "10", "11", "12","13","14","15","16","17","18","19", "20")
levels(regData_noNA$meta_cod) <- c("CVD","Noncommunicable \n Diseases", "Respiratory",
"External", "Renal Failure", "Global Epidemic", "Cancer",
"Infectious", "Suicide")
table(regData_noNA$meta_cod, regData_noNA$g5_06b)
table(regData_noNA$meta_cod, regData_noNA$g5_06a)
regData_noNA[,list(death_count=sum(death)), by="g5_06a"]
regData_noNA[,list(death_count=sum(death)), by="g5_06b"]
regData_noNA[,list(death_count=sum(death)), by="g1_06m"]
regData_noNA[,list(death_count=sum(death)), by="sex"]
regData_noNA[,list(death_count=sum(death)), by="site"]
levels(regData_noNA$site)
levels(regData_noNA$site) <- c("Mexico","AP", "UP",
"Bohol", "Dar", "Pemba")
regData_noPemba <- regData_noNA[site!="Pemba"]
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_results <- coef(multinom_noPemba)
multinom_tidy <- tidy(multinom_noPemba)
View(multinom_tidy)
View(regData_noPemba)
multinom_results
levels(regData_noPemba$site) <- c("Mexico","AP", "UP",
"Bohol", "Dar")
regData_noPemba$site <- as.character.condition(regData_noPemba$site)
levels(regData_noPemba$site) <- c("Mexico","AP", "UP",
"Bohol", "Dar")
regData_noPemba$site <- as.character(regData_noPemba$site)
levels(regData_noPemba$site) <- c("Mexico","AP", "UP",
"Bohol", "Dar")
levels(regData_noPemba$site)
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_results <- coef(multinom_noPemba)
multinom_tidy <- tidy(multinom_noPemba)
View(multinom_tidy)
multinom_tidy$log_estimate <- log(multinom_tidy$estimate)
View(multinom_tidy)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
))
regData_noPemba <- regData_noNA[site!="Pemba"|g1_06m!="April"]
View(regData_noPemba)
regData_noPemba <- regData_noNA[(site!="Pemba")|(g1_06m!="April")]
View(regData_noNA)
regData_noPemba <- regData_noNA[site!="Pemba"]
regData_noPemba <- regData_noPemba[g1_06m!="April"]
## highest counts of month of death are "Don't Know"
regData_noPemba$g1_06m <- as.character(regData_noPemba$g1_06m)
levels(regData_noPemba$g1_06m) <- c("Don't Know", "January", "February", "March","May",
"June", "July", "August", "September", "October", "November",
"December")
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_results <- coef(multinom_noPemba)
multinom_tidy <- tidy(multinom_noPemba)
View(multinom_tidy)
regData_noPemba$site <- as.character(regData_noPemba$site)
levels(regData_noPemba$site) <- c("Mexico","AP", "UP",
"Bohol", "Dar")
## highest counts of month of death are "Don't Know"
regData_noPemba$g1_06m <- as.character(regData_noPemba$g1_06m)
levels(regData_noPemba$g1_06m) <- c("Don't Know", "January", "February", "March","May",
"June", "July", "August", "September", "October", "November",
"December")
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_tidy <- tidy(multinom_noPemba)
View(multinom_tidy)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
))
table(regData_noPemba$meta_cod, regData_noPemba$site)
table(regData_noNA$meta_cod, regData_noNA$site)
View(regData_noNA)
regData_noNA$site[6]
levels(regData_noNA$site[6])
table(regData$meta_cod, regData$site)
regData$meta_cod <- mapply(create_meta_adult_cod, regData$gs_text34)
table(regData$meta_cod, regData$site)
levels(regData$site)
levels(regData_noNA$site) <- c("Mexico","AP", "UP",
"Bohol", "Dar", "Pemba")
regData_noPemba <- regData_noNA[site!="Pemba"]
regData_noPemba <- regData_noPemba[g1_06m!="April"]
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_results <- coef(multinom_noPemba)
multinom_tidy <- tidy(multinom_noPemba)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
))
View(regData_noPemba)
View(multinom_tidy)
table(regData_noPemba$meta_cod, regData_noPemba$site)
?revel
relevel
?relevel
regData_noNA$site <- relevel(regData_noNA$site,c("Mexico","AP", "UP",
"Bohol", "Dar", "Pemba"))
regData_noNA$site <- relevel(regData_noNA$site,"Mexico")
regData_noNA <- na.omit(regData)
create_meta_adult_cod <- function(x){
category = x
if(grepl(paste(c("Bite of Venomous Animal", "Violent Death", "Road Traffic",
"Poisonings", "Drowning", "Homicide","Falls", "Fires", "Other Injuries"), collapse = "|"),x)){
category = "External"
} else if(grepl(paste(c("Diarrhea/Dysentery", "Encephalitis", "Meningitis", "Measles",
"Hemorrhagic fever", "Other Infectious Diseases"), collapse = "|"), x)){
category = "Infectious"
} else if(grepl(paste(c("Malaria","AIDS", "TB"), collapse = "|"), x)){
category = "Global Epidemic"
} else if(grepl(paste(c("Pneumonia", "Asthma","COPD"), collapse = "|"), x)){
category = "Respiratory"
} else if(grepl(paste(c("Renal Failure"), collapse = "|"),x)){
category = "Renal Failure"
} else if(grepl(paste(c("Acute Myocardial Infarction", "Stroke","Other Cardiovascular Diseases"), collapse = "|"),x)){
category = "CVD"
} else if (grepl(paste(c("Stomach Cancer","Breast Cancer", "Esophageal Cancer", "Prostate Cancer",
"Colorectal Cancer", "Cervical Cancer", "Lung Cancer", "Leukemia/Lymphomas"), collapse="|"),x)){
category = "Cancer"
} else if (grepl(c("Suicide"),x)){
category = "Suicide"
} else if (grepl(c("Maternal"),x)){
category = "Maternal"
} else if (grepl(paste(c("Diabetes", "Epilepsy","Cirrhosis","Other Non-communicable Diseases"),
collapse="|"),x)){
category = "Noncommunicable \n Diseases"
}
return(category)
}
regData_noNA$meta_cod <- mapply(create_meta_adult_cod, regData_noNA$gs_text34)
## check that there are no empty cells for the multinom regression
regData_noNA$death <- 1
graphData <- regData_noNA[,list(death_count=sum(death)), by=c("meta_cod","g4_08", #separate room for cooking
"g5_06a", "g5_06b", # education level + # of years of education
"g1_06m", # day, month, year of death
"site", "sex")]
## remove maternal CoD
regData_noNA <- regData_noNA[!meta_cod=="Maternal"]
## highest counts of month of death are "Don't Know"
regData_noNA$g1_06m <- relevel(regData_noNA$g1_06m, "Don't Know")
## reference category: "High School"
regData_noNA$g5_06a <- relevel(regData_noNA$g5_06a,"High School")
## reference category: Don't Know
regData_noNA$g5_06b <- relevel(regData_noNA$g5_06b, "Don't Know")
regData_noNA$meta_cod <- relevel(regData_noNA$meta_cod, "CVD")
levels(regData_noNA$meta_cod)
regData_noNA$meta_cod <- as.factor(regData_noNA$meta_cod)
regData_noNA$meta_cod <- relevel(regData_noNA$meta_cod, "CVD")
regData_noNA$site <- relevel(regData_noNA$site,"Mexico")
regData_noPemba <- regData_noNA[site!="Pemba"]
regData_noPemba <- regData_noPemba[g1_06m!="April"]
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_results <- coef(multinom_noPemba)
multinom_tidy <- tidy(multinom_noPemba)
#multinom_tidy$log_estimate <- log(multinom_tidy$estimate)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
))
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
) %>%
)
multinom_tidy$estimate
multinom_tidy$term
levels(multinom_tidy$term)
unique(multinom_tidy$term)
≈
xform <- list(categoryorder = "array",
categoryarray = c("(Intercept)",
"as.factor(sex)Male",
"g4_08Yes",
"siteAP",
"siteUP",
"siteBohol",
"siteDar",
"sitePemba",
"g5_06aNo Schooling",
"g5_06aPrimary School",
"g5_06aCollege or Higher",
"g1_06mJanuary",
"g1_06mFebruary",
"g1_06mMarch",
"g1_06mApril",
"g1_06mMay",
"g1_06mJune",
"g1_06mJuly",
"g1_06mAugust",
"g1_06mSeptember",
"g1_06mOctober",
"g1_06mNovember",
"g1_06mDecember"))
View(xform)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
) %>%
layout(xaxis = xform)
)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
)) %>%
layout(xaxis = xform)
plot_ly(z=round(log(multinom_tidy$std.error),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term) %>%
layout(xaxis = xform)
plot_ly(z=round((multinom_tidy$std.error),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
)) %>%
layout(xaxis = xform)
plot_ly(z=round((multinom_tidy$std.error),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term
)) %>%
layout(xaxis = xform)
plot_ly(z=round((multinom_tidy$std.error),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term) %>%
layout(xaxis = xform)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
)) %>%
layout(xaxis = xform)
regData_noPemba[,list(death_count=sum(death)), by="g1_06m"]
View(multinom_tidy)
regData_noNA[,list(death_count=sum(death)), by="g1_06m"]
## highest counts of month of death are "Don't Know"
regData_noNA$g1_06m <- relevel(regData_noNA$g1_06m, "November")
levels(regData_noNA$g1_06m)
## highest counts of month of death are "Don't Know"
regData_noNA$g1_06m <- relevel(regData_noNA$g1_06m, " November")
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
dataFreeze <- trim(dataFreeze)
levels(regData_noNA$g1_06m)
regData_noNA[,list(death_count=sum(death)), by="g5_06a"]
regData_noNA[,list(death_count=sum(death)), by="g5_06b"]
## reference category: "High School"
regData_noNA$g5_06a <- relevel(regData_noNA$g5_06a,"Primary School")
## reference category: Don't Know
regData_noNA$g5_06b <- relevel(regData_noNA$g5_06b, "0")
regData_noNA[,list(death_count=sum(death)), by="meta_cod"]
regData_noNA$meta_cod <- relevel(regData_noNA$meta_cod, "CVD")
regData_noNA[,list(death_count=sum(death)), by="site"]
regData_noNA$site <- relevel(regData_noNA$site,"Mexico")
regData_noPemba <- regData_noNA[site!="Pemba"]
regData_noPemba <- regData_noPemba[g1_06m!="April"]
multinom_noPemba <- multinom(formula =meta_cod~ site + as.factor(sex) +g4_08 + g5_06a + g1_06m,
data = regData_noPemba,maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
multinom_tidy <- tidy(multinom_noPemba)
View(multinom_tidy)
plot_ly(z=round(log(multinom_tidy$estimate),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term,
text=paste(
"std. error:", round(multinom_tidy$std.error, 3)
)) %>%
layout(xaxis = xform)
regData_noPemba[,list(death_count=sum(death)), by="g5_06a"]
plot_ly(z=round((multinom_tidy$std.error),3),
type="heatmap",y=multinom_tidy$y.level,x=multinom_tidy$term) %>%
layout(xaxis = xform)
rm(list=ls())
library(data.table)
library(ggplot2)
library(locfit)
library(survival)
library(sas7bdat)
library(ggfortify)
library(survival)
anemia_data <- data.table(read.sas7bdat("~/Library/Mobile Documents/com~apple~CloudDocs/School/Fall 2019/Biostat 675/hw3/anemia2.sas7bdat"))
anemia_data$age_cat <- as.factor(ifelse(anemia_data$age<=19, "19 & Under", "20 and Over"))
fit <- survfit(Surv(obs_time, GVHD) ~ age_cat, data =anemia_data)
autoplot(fit)
fit$cumhaz
View(anemia_data)
?survfit
lambda_j <- fit$n.censor/fit$n.risk
Lambda_j <- cumsum(Lambda_j)
Lambda_j <- cumsum(lambda_j)
Lambda_j
View(anemia_data)
lambda_j <- fit$n.event/fit$n.risk
Lambda_j <- cumsum(lambda_j)
Lambda_j
lambda_j
View(anemia_data)
fit$n.event
View(anemia_data)
View(anemia_data)
survdiff(Surv(obs_time, GVHD) ~ age_cat, data=anemia_data, rho = 0)
logrank1 <- survdiff(Surv(obs_time, GVHD) ~ age_cat, data=anemia_data, rho = 0)
?survdiff
trt_sequence <- expand.grid(c(0,1), c(0,1), c(0,1))
X <- cbind(1, c(t(trt_sequence)))
View(trt_sequence)
?expand.grid
rm(list=ls())
library(data.table)
library(ggplot2)
library(tidyverse)
library(reshape2)
library(foreign)
library(ALA)
install.packages("ALA")
beta_0 <- 1
beta_1 <- 2
mu_all <- X %*% matrix(c(beta_0, beta_1), ncol=1)
trt_sequence <- expand.grid(c(0,1), c(0,1), c(0,1))
X <- cbind(1, c(t(trt_sequence)))
beta_0 <- 1
beta_1 <- 2
mu_all <- X %*% matrix(c(beta_0, beta_1), ncol=1)
View(mu_all)
X
View(mu_all)
rho_vec <- seq(0.1, 0.9, 0.1)
V0 <- matrix(c(1,rho,rho^2,
rho,1,rho,
rho^2,rho,1),nrow=3,ncol=3,byrow=TRUE)
define_VO <- function(rho){
V0 <- matrix(c(1,rho,rho^2,
rho,1,rho,
rho^2,rho,1),nrow=3,ncol=3,byrow=TRUE)
return(V0)
}
define_VO(rho_vect[1])
define_VO(rho_vec[1])
## computing the variance of OLS estimator
var_ols_beta <- function(X,sigma_sqr){
sigma_sqr * solve(crossprod(X))
}
var_ols_beta(4, X)
crossprod(X)
solve(crossprod(X))
sigma_sqr*solve(crossprod(X))
4*solve(crossprod(X))
var_ols_beta <- function(X,sigma_sqr){
sigma_sqr*solve(crossprod(X))
}
var_ols_beta(4, X)
var_ols_beta(X, 4)
I_m_by_m <-  diag(rep(1,m))
I_m_by_m <-  diag(rep(1,8))
View(I_m_by_m)
i =1
V0 <- define_VO(rho_vec[i])
I_m_by_m <-  diag(rep(1,m))
m =8
V <- I_m_by_m%x%V0
V
sigma_squared <- 4 # variance.
wls_vec[i] <- var_wls_using_W_as_working(X, W, V, sigma_squared)
## computing the "true"/theoretical while acknowledging that W may not be optimal
var_wls_using_W_as_working <- function(X,W,true_V,true_sigma_squared){
A <- solve(t(X)%*%W%*%X)%*%t(X)%*%W
A%*%(true_sigma_squared*true_V)%*%t(A)
}
wls_vec[i] <- var_wls_using_W_as_working(X, W, V, sigma_squared)
W <- solve(I_m_by_m%x%V0)
wls_vec[i] <- var_wls_using_W_as_working(X, W, V, sigma_squared)
wls_vec <- rep(0, length(rho_vec))
wls_vec[i] <- var_wls_using_W_as_working(X, W, V, sigma_squared)
test <- var_wls_using_W_as_working(X, W, V, sigma_squared)
test
wls_var_vec <- rep(NA,3)
## computing the "true"/theoretical while acknowledging that W may not be optimal
var_wls_using_W_as_working <- function(X,W,true_V,true_sigma_squared){
A <- solve(t(X)%*%W%*%X)%*%t(X)%*%W
A%*%(true_sigma_squared*true_V)%*%t(A)
}
var_wls_using_W_as_working(X, W, V, sigma_squared)
solve(t(X)%*%W%*%X)%*%t(X)%*%W
A%*%(4*V)%*%t(A)
A <- solve(t(X)%*%W%*%X)%*%t(X)%*%W
A%*%(4*V)%*%t(A)
I_m_by_m <-  diag(rep(1,m))
solve(I_m_by_m%x%V0)
m <- 8 # 8 subjects.
n <- 3 # 3 measurements per subject.
X <- matrix(1,n*m)
View(X)
X <- cbind(1, c(t(trt_sequence))) ## design matrix
mu_all <- X %*% matrix(c(beta_0, beta_1), ncol=1)
wls_vec[i] <- var_wls_using_W_as_working(X, W, V, sigma_squared)[2,2] ##variance of beta_1
ols_vec[i] <- var_ols_beta(X, 4)
ols_vec <- rep(0, length(rho_vec))
ols_vec[i] <- var_ols_beta(X, 4)
ols_vec[i] <- var_ols_beta(X, 4)[2,2]
for(i in 1:length(rho_vec)){
ols_vec[i] <- var_ols_beta(X, 4)[2,2]
## get the V0 for each replication
V0 <- define_VO(rho_vec[i])
I_m_by_m <-  diag(rep(1,m))
W <- solve(I_m_by_m%x%V0)
V <- I_m_by_m%x%V0 # variance covariance matrix for all subjects.
wls_vec[i] <- var_wls_using_W_as_working(X, W, V, sigma_squared)[2,2] ##variance of beta_1
##
}
plot(ols_vec, wls_vec)
plot(rho_vec, rel_efficiency,
type = "o", lwd = 2, col = "red", xlab = expression(rho))
rel_efficiency <- wls_vec/ols_vec
plot(rho_vec, rel_efficiency,
type = "o", lwd = 2, col = "red", xlab = expression(rho))
?plot
plot(rho_vec, rel_efficiency,
type = "o", lwd = 2, col = "red", xlab = expression(rho),
main="Relative Efficiency of WLS vs. OLS")
