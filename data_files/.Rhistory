cod.nbc2 <- getTopCOD(nbc2)
cod.insilico2 <- getTopCOD(insilico2)
#we can compare these COD assignments to the true labels
cod_names <- c(levels(test$gs_text34, "Undetermined"))
test$gs_text34
#we can compare these COD assignments to the true labels
cod_names <- c(levels(test$gs_text34), "Undetermined")
cod.true <- factor(test$gs_text34, levels = cod_names)
cod.all <- list(Tariff = cod.tariff2, InterVA = cod.interva2,
NBC = cod.nbc2, InSilicoVA = cod.insilico2)
for(i in 1:length(cod.all)){
cod.fit <- factor(cod.all[[i]][,"cause"],
levels = cod_names)
tab <- table(cod.true, cod.fit)
acc <- round(sum(diag(tab)) / sum(tab), 4) * 100
print(
levelplot(tab,
scales=list(tck=0, x=list(rot=90)),
col.regions=colorpanel(11, "white", "grey10"),
at=seq(0, 100, len = 11),
main=paste0(names(cod.all)[i], " - Accuracy: ", acc, "%"),
xlab="True Causes", ylab="Predicted Causes")
)
}
csmf.tariff2 <- getCSMF(tariff2)
csmf.interva2 <- getCSMF(interva2)
csmf.nbc2 <- getCSMF(nbc2)
csmf.insilico2 <- getCSMF(insilico2)
## produces results for 34 CoD for each algorithm
cbind(Tariff = csmf.tariff2, InterVA = csmf.interva2[1:34],
NBC = csmf.nbc2, InSilicoVA = csmf.insilico2[, "Mean"])
csmf.true <- table(test$gs_text34)
csmf.true <- csmf.true[names(csmf.tariff2)]
csmf.true <- as.numeric(csmf.true / sum(csmf.true))
cod_names <- names(csmf.tariff2)
csmf.all <- list(Tariff = csmf.tariff2, InterVA = csmf.interva2,
NBC = csmf.nbc2, InSilicoVA = csmf.insilico2[, "Mean"])
par(mfrow = c(2, 2))
for(i in 1:length(csmf.all)){
plot(csmf.true, csmf.all[[i]][1:34], xlim = c(0, 0.15), ylim = c(0, 0.15),
xlab = "True CSMF", ylab = "Fitted CSMF",
main = names(csmf.all)[i])
abline(a=0, b=1, col="red")
}
##
getCSMF_accuracy(csmf.tariff2, csmf.true)
getCSMF_accuracy(csmf.interva2, csmf.true, "Undetermined")
getCSMF_accuracy(csmf.nbc2, csmf.true)
getCSMF_accuracy(csmf.insilico2[, "Mean"], csmf.true)
getCSMF_accuracy(csmf.tariff2, csmf.true)
getCSMF_accuracy(csmf.interva2, csmf.true, "Undetermined")
getCSMF_accuracy(csmf.nbc2, csmf.true)
getCSMF_accuracy(csmf.insilico2[, "Mean"], csmf.true)
# for InSilicoVA, the posterior credible intervals for the CSMF can be obtained
csmf_accuarcy_insilico <- getCSMF_accuracy(insilico2, csmf.true)
hist(csmf_accuarcy_insilico)
boxplot(csmf_accuarcy_insilico)
## extract the top most likely CoD for each algorithm
cod.tariff2 <- getTopCOD(tariff2)
cod.interva2 <- getTopCOD(interva2)
cod.nbc2 <- getTopCOD(nbc2)
cod.insilico2 <- getTopCOD(insilico2)
#we can compare these COD assignments to the true labels
cod_names <- c(levels(test$gs_text34), "Undetermined")
cod.true <- factor(test$gs_text34, levels = cod_names)
cod.all <- list(Tariff = cod.tariff2, InterVA = cod.interva2,
NBC = cod.nbc2, InSilicoVA = cod.insilico2)
for(i in 1:length(cod.all)){
cod.fit <- factor(cod.all[[i]][,"cause"],
levels = cod_names)
tab <- table(cod.true, cod.fit)
acc <- round(sum(diag(tab)) / sum(tab), 4) * 100
print(
levelplot(tab,
scales=list(tck=0, x=list(rot=90)),
col.regions=colorpanel(11, "white", "grey10"),
at=seq(0, 100, len = 11),
main=paste0(names(cod.all)[i], " - Accuracy: ", acc, "%"),
xlab="True Causes", ylab="Predicted Causes")
)
}
rm(list=ls())
rm(list=ls())
library(openVA)
library(ggplot2)
library(lattice)
library(gplots)
## download the PHMRC data:
PHMRC_full <- data.table(read.csv(getPHMRC_url("adult")))
library(ggplot2)
library(data.table)
library(lattice)
library(gplots)
## download the PHMRC data:
PHMRC_full <- data.table(read.csv(getPHMRC_url("adult")))
head(PHMRC_full$g5_06a)
head(PHMRC_full$g1_09)
head(PHMRC_full$g4_08)
demo_vars <- PHMRC_full[,c("newid","site",
"g4_08", # proxy for income - is there a separate room for cooking?
"g5_06a", "g5_06b", # education level + # of years of education
"g1_06y", "g1_06m", "g1_06d", # day, month, year of death
"gs_text34"), with=FALSE]
## convert the data (apply dichotomization, etc.) so that it can be analyzed by VA algorithms
convert.default <- ConvertData.phmrc(PHMRC_full, phmrc.type = "adult",
cutoff = "default", cause = "va34")
convertedData <- data.table(convert.default$output)
## 7/19 - join site and death date to the cleaned dataset
fullData <- merge(demo_vars, convertedData, by.x="newid",by.y= "ID", all.y=TRUE)
## convert the Yes values to 1
fullData[fullData=="Y"] <- 1
fullData[fullData==""] <- 0
fullData[fullData=="."] <- NA
write.csv(fullData, "~/Dropbox/Irena/verbal_autopsy_data/data_freeze/datafreeze_08262019_binary.csv", row.names = FALSE)
## following the documentation, we can split the data into training/test:
# 1554 observations from Andhra Pradesh, India used as testing set
# the rest as training set.
View(fullData)
rm(list=ls())
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(foreign)
library(nnet)
library(grDevices)
library(gplots)
library(plotly)
library(broom)
##----------------------------
### load the VA datasets ###
##----------------------------
setwd("/Users/irena/repos/slvm_va/data_files/")
dataFreeze <-  data.table(read.csv("data_freeze_10062019.csv"))
dataDict <- data.table(read_excel("data_dictionary.xlsx"))
dataFreeze$sex <- ifelse(dataFreeze$g1_05==1, "Female", "Male")
regData <- dataFreeze[,  c("gs_text34",#main CoD
"g4_08", #separate room for cooking
"g5_06a", # education level
#"g5_06b",  # of years of education
"g1_06y", "g1_06m", "g1_06d", # day, month, year of death
"site", "sex"), with=FALSE]
## check how many missing values:
sum(is.na(regData))
## 66 missing values - for now, just drop:
regData_noNA <- na.omit(regData)
# regData_noNA$cod_dates <-paste(regData_noNA$g1_06y, regData_noNA$g1_06m,
#                                regData_noNA$g1_06d,sep="-")
##
### Since there are a relatively high # of unique CoD, we will create a meta-category column to group similar CoD
## generally following what the IHME website has:
create_meta_adult_cod <- function(x){
category = x
if(grepl(paste(c("Bite of Venomous Animal", "Violent Death", "Road Traffic",
"Poisonings", "Drowning", "Homicide","Falls", "Fires", "Other Injuries"), collapse = "|"),x)){
category = "External"
} else if(grepl(paste(c("Diarrhea/Dysentery", "Encephalitis", "Meningitis", "Measles",
"Hemorrhagic fever", "Other Infectious Diseases"), collapse = "|"), x)){
category = "Infectious"
} else if(grepl(paste(c("Malaria","AIDS", "TB"), collapse = "|"), x)){
category = "Global Epidemic"
} else if(grepl(paste(c("Pneumonia", "Asthma","COPD"), collapse = "|"), x)){
category = "Respiratory"
} else if(grepl(paste(c("Renal Failure"), collapse = "|"),x)){
category = "Renal Failure"
} else if(grepl(paste(c("Acute Myocardial Infarction", "Stroke","Other Cardiovascular Diseases"), collapse = "|"),x)){
category = "CVD"
} else if (grepl(paste(c("Stomach Cancer","Breast Cancer", "Esophageal Cancer", "Prostate Cancer",
"Colorectal Cancer", "Cervical Cancer", "Lung Cancer", "Leukemia/Lymphomas"), collapse="|"),x)){
category = "Cancer"
} else if (grepl(c("Suicide"),x)){
category = "Suicide"
} else if (grepl(c("Maternal"),x)){
category = "Maternal"
} else if (grepl(paste(c("Diabetes", "Epilepsy","Cirrhosis","Other Non-communicable Diseases"),
collapse="|"),x)){
category = "Noncommunicable \n Diseases"
}
return(category)
}
regData_noNA$meta_cod <- mapply(create_meta_adult_cod, regData_noNA$gs_text34)
## remove maternal CoD - since there will be zero counts for males
regData_noNA <- regData_noNA[!meta_cod=="Maternal"]
## -------------------------
## Check that there are no empty cells for the multinom regression
## ------------------------
## highest counts of month of death are November
regData_noNA$death <- 1
regData_noNA[,list(death_count=sum(death)), by=c("g1_06m")]
# relevel the month variable so November is the reference category:
regData_noNA$g1_06m <- relevel(regData_noNA$g1_06m, "January")
# regData_noNA$month <- copy(regData_noNA$g1_06m)
# regData_noNA[month=="April", month:="May"]
## for level of education: make "Primary School" the reference category:
regData_noNA[,list(death_count=sum(death)), by=c("g5_06a")]
regData_noNA$g5_06a <- relevel(regData_noNA$g5_06a,"No Schooling")
## for # of years in school, make 0 the reference category: 10/15 - removed for now because it has many categories
# regData_noNA[,list(death_count=sum(death)), by=c("g5_06b")]
# regData_noNA$g5_06b <- relevel(regData_noNA$g5_06b, "0")
### make "Yes" the reference for "do you have a separate room for cooking"
regData_noNA[,list(death_count=sum(death)), by=c("g4_08")]
regData_noNA$g4_08 <- relevel(regData_noNA$g4_08, "Yes")
### make CVD the reference category for the broader/coarser causes of death
regData_noNA[,list(death_count=sum(death)), by=c("meta_cod")]
regData_noNA$meta_cod <- as.factor(regData_noNA$meta_cod)
regData_noNA$meta_cod <- relevel(regData_noNA$meta_cod, "CVD")
### make Mexico the reference category for the broader/coarser causes of death
regData_noNA[,list(death_count=sum(death)), by=c("site")]
regData_noNA$site <- relevel(regData_noNA$site,"Mexico")
### make male the reference for sex variable:
regData_noNA[,list(death_count=sum(death)), by=c("sex")]
regData_noNA$sex <- as.factor(regData_noNA$sex)
regData_noNA$sex <- relevel(regData_noNA$sex, "Male")
regData_noPemba <- regData_noNA[site!="Pemba"]
# regData_noPemba <- regData_noPemba[g1_06m!="April"]
regData_noPemba$site <- as.character(regData_noPemba$site)
regData_noPemba$site <- factor(regData_noPemba$site, levels=c("Mexico", "AP", "UP", "Bohol", "Dar"))
###---------------------
### DROP "Don't Know" for month of death (there are only six observations) and level of schooling
###---------------------
regData_noPemba <- regData_noPemba[!g1_06m%in%c("Don't Know")]
regData_noPemba <- regData_noPemba[!g5_06a%in%c("Unknown")]
# regData_noPemba <- regData_noPemba[g1_06m!="April"]
regData_noPemba$g1_06m <- as.character(regData_noPemba$g1_06m)
regData_noPemba$g1_06m <- factor(regData_noPemba$g1_06m)
regData_noPemba$g1_06m <- relevel(regData_noPemba$g1_06m,"January")
## revel level of schooling
regData_noPemba$g5_06a <- as.character(regData_noPemba$g5_06a)
regData_noPemba$g5_06a<- factor(regData_noPemba$g5_06a)
regData_noPemba$g5_06a <- relevel(regData_noPemba$g5_06a,"No Schooling")
site_plots <- list()
std_error_plots <- list()
i = 1
xform_stratify <- list(categoryorder = "array",
categoryarray = c("(Intercept)",
"sexFemale",
"g4_08No",
"g5_06aPrimary School",
"g5_06aHigh School",
"g5_06aCollege or Higher",
"g1_06mFebruary",
"g1_06mMarch",
"g1_06mApril",
"g1_06mMay",
"g1_06mJune",
"g1_06mJuly",
"g1_06mAugust",
"g1_06mSeptember",
"g1_06mOctober",
"g1_06mNovember",
"g1_06mDecember"))
for(k in unique(regData_noPemba$site)){
multinom_bysite <- multinom(formula =meta_cod~ sex +g4_08 + g5_06a + g1_06m,
data = regData_noPemba[site==k],maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
tidy_multinom <- tidy(multinom_bysite)
site_plots[[i]] <- plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for Site ", k, "(No Unknown Schooling and Month of Death)"))
std_error_plots[[i]] <- plot_ly(z=round(tidy_multinom$std.error,3),
type="heatmap",y=tidy_multinom$y.level,x=tidy_multinom$term) %>%
layout(xaxis = xform_stratify, paste0(title="Std. Errors for Site ", k, "(No Unknown Schooling and Month of Death)"))
i=i+1
}
site_plots[[1]]
site_plots[[2]]
site_plots[[3]]
site_plots[[4]]
site_plots[[5]]
exp(-38.0)
ap_data <- regData_noPemba[site=="UP"]
up_data <- regData_noPemba[site=="UP"]
table(up_data$meta_cod, up_data$g1_06m)
table(regData_noPemba$death, regData_noPemba$site)
dar_data <- regData_noPemba[site=="Dar"]
table(dar_data$meta_cod, dar_data$g5_06a)
bohol_data <- regData_noPemba[site=="Bohol"]
table(bohol_data$meta_cod, bohol_data$g5_06a)
table(up_data$meta_cod, up_data$g5_06a)
table(up_data$meta_cod, up_data$g4_08)
table(ap_data$meta_cod, ap_data$g4_08)
table(bohol_data$meta_cod, bohol_data$g4_08)
site_plots <- list()
std_error_plots <- list()
i = 1
xform_stratify <- list(categoryorder = "array",
categoryarray = c("(Intercept)",
"sexFemale",
"g4_08No",
"g5_06aPrimary School",
"g5_06aHigh School",
"g5_06aCollege or Higher",
"g1_06mFebruary",
"g1_06mMarch",
"g1_06mApril",
"g1_06mMay",
"g1_06mJune",
"g1_06mJuly",
"g1_06mAugust",
"g1_06mSeptember",
"g1_06mOctober",
"g1_06mNovember",
"g1_06mDecember"))
for(k in unique(regData_noPemba$site)){
multinom_bysite <- multinom(formula =meta_cod~ sex +g4_08 + g5_06a + g1_06m,
data = regData_noPemba[site==k],maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
tidy_multinom <- tidy(multinom_bysite)
site_plots[[i]] <- plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",
marker=list(
color=seq(-10, 10)),
y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for Site ", k, "(No Unknown Schooling and Month of Death)"))
std_error_plots[[i]] <- plot_ly(z=round(tidy_multinom$std.error,3),
type="heatmap",y=tidy_multinom$y.level,x=tidy_multinom$term) %>%
layout(xaxis = xform_stratify, paste0(title="Std. Errors for Site ", k, "(No Unknown Schooling and Month of Death)"))
i=i+1
}
site_plots[[1]]
site_plots[[i]] <- plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",
zmin = -10,
zmax = 10,
y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for Site ", k, "(No Unknown Schooling and Month of Death)"))
plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",
zmin = -10,
zmax = 10,
y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for Site ", k, "(No Unknown Schooling and Month of Death)"))
site_plots <- list()
std_error_plots <- list()
i = 1
xform_stratify <- list(categoryorder = "array",
categoryarray = c("(Intercept)",
"sexFemale",
"g4_08No",
"g5_06aPrimary School",
"g5_06aHigh School",
"g5_06aCollege or Higher",
"g1_06mFebruary",
"g1_06mMarch",
"g1_06mApril",
"g1_06mMay",
"g1_06mJune",
"g1_06mJuly",
"g1_06mAugust",
"g1_06mSeptember",
"g1_06mOctober",
"g1_06mNovember",
"g1_06mDecember"))
for(k in unique(regData_noPemba$site)){
multinom_bysite <- multinom(formula =meta_cod~ sex +g4_08 + g5_06a + g1_06m,
data = regData_noPemba[site==k],maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
tidy_multinom <- tidy(multinom_bysite)
site_plots[[i]] <- plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",
zmin = -10,
zmax = 10,
y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for Site ", k, "(No Unknown Schooling and Month of Death)"))
std_error_plots[[i]] <- plot_ly(z=round(tidy_multinom$std.error,3),
type="heatmap",y=tidy_multinom$y.level,x=tidy_multinom$term) %>%
layout(xaxis = xform_stratify, paste0(title="Std. Errors for Site ", k, "(No Unknown Schooling and Month of Death)"))
i=i+1
}
site_plots[[1]]
site_plots[[2]]
site_plots[[3]]
site_plots[4]]
site_plots[[4]]
site_plots[[5]]
#### Stratify by Site and Regress on Month of Death #####
site_plots <- list()
std_error_plots <- list()
i = 1
xform_stratify <- list(categoryorder = "array",
categoryarray = c("(Intercept)",
"sexFemale",
"g4_08No",
"g5_06aPrimary School",
"g5_06aHigh School",
"g5_06aCollege or Higher",
"g1_06mFebruary",
"g1_06mMarch",
"g1_06mApril",
"g1_06mMay",
"g1_06mJune",
"g1_06mJuly",
"g1_06mAugust",
"g1_06mSeptember",
"g1_06mOctober",
"g1_06mNovember",
"g1_06mDecember"))
for(k in unique(regData_noPemba$site)){
multinom_bysite <- multinom(formula =meta_cod~ sex +g4_08 + g5_06a + g1_06m,
data = regData_noPemba[site==k],maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
tidy_multinom <- tidy(multinom_bysite)
site_plots[[i]] <- plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",
zmin = -10,
zmid=0,
zmax = 10,
y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for ", k, "(No Unknown Schooling and Month of Death)"))
std_error_plots[[i]] <- plot_ly(z=round(tidy_multinom$std.error,3),
type="heatmap",y=tidy_multinom$y.level,x=tidy_multinom$term) %>%
layout(xaxis = xform_stratify, paste0(title="Std. Errors for Site ", k, "(No Unknown Schooling and Month of Death)"))
i=i+1
}
site_plots[[5]]
site_plots <- list()
std_error_plots <- list()
i = 1
xform_stratify <- list(categoryorder = "array",
categoryarray = c("(Intercept)",
"sexFemale",
"g4_08No",
"g5_06aPrimary School",
"g5_06aHigh School",
"g5_06aCollege or Higher",
"g1_06mFebruary",
"g1_06mMarch",
"g1_06mApril",
"g1_06mMay",
"g1_06mJune",
"g1_06mJuly",
"g1_06mAugust",
"g1_06mSeptember",
"g1_06mOctober",
"g1_06mNovember",
"g1_06mDecember"))
for(k in unique(regData_noPemba$site)){
multinom_bysite <- multinom(formula =meta_cod~ sex +g4_08 + g5_06a + g1_06m,
data = regData_noPemba[site==k],maxit=1000,
family="multinomial",MaxNWts =1000, reltol=1.0e-12)
tidy_multinom <- tidy(multinom_bysite)
site_plots[[i]] <- plot_ly(z=round(log(tidy_multinom$estimate),3),
type="heatmap",
zmin = -10,
zmid=0,
zmax = 10,
y=tidy_multinom$y.level,x=tidy_multinom$term,
text=paste(
"std. error:", round(tidy_multinom$std.error, 3)
)) %>%
layout(xaxis = xform_stratify, title=paste0("Regression for ", k, " (No Unknown Schooling and Month of Death)"))
std_error_plots[[i]] <- plot_ly(z=round(tidy_multinom$std.error,3),
type="heatmap",y=tidy_multinom$y.level,x=tidy_multinom$term) %>%
layout(xaxis = xform_stratify, paste0(title="Std. Errors for Site ", k, "(No Unknown Schooling and Month of Death)"))
i=i+1
}
site_plots[[5]]
site_plots[[5]]
site_plots[[4]]
site_plots[[3]]
site_plots[[2]]
site_plots[[1]]
mexico_data <- regData_noPemba[site=="Mexico"]
table(mexico_data$meta_cod, mexico_data$g1_06m)
table(mexico_data$meta_cod, mexico_data$death)
table(ap_data$meta_cod, ap_data$g1_06m)
up_data <- regData_noPemba[site=="UP"]
table(up_data$meta_cod, up_data$g1_06m)
table(ap_data$meta_cod, ap_data$g1_06m)
table(up_data$meta_cod, up_data$g1_06m)
ap_data <- regData_noPemba[site=="AP"]
table(ap_data$meta_cod, ap_data$g1_06m)
table(dar_data$meta_cod, ap_data$g5_06)
table(dar_data$meta_cod, dar_data$g5_06)
table(dar_data$meta_cod, dar_data$g1_06m)
install.packages("mma")
library(mma)
data("weight_behavior")
rm(list=ls())
library(mma)
data("weight_behavior")
x=weight_behavior[,c(2,4:14)]
pred=weight_behavior[,3]
y=weight_behavior[,15]
data.b.b.2.1<-data.org(x,y,mediator=5:12,jointm=list(n=1,j1=c(5,7,9)),
pred=pred,predref="M", alpha=0.4,alpha2=0.4)
View(weight_behavior)
weight_behavior[,15]
summary(data.b.b.2.1)
data.b.b.2<-data.org(x,y,pred=pred,contmed=c(7:9,11:12),binmed=c(6,10),
binref=c(1,1),catmed=5,catref=1,jointm=list(n=1,j1=c(5,7,9)),
predref="M",alpha=0.4,alpha2=0.4)
summary(data.b.b.2)
